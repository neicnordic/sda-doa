services:


  certfixer:
    command:
      - /bin/sh
      - /scripts/make_certs.sh
#    container_name: certfixer
    environment:
      - KEYSTORE_PASSWORD=testingthis
    image: alpine:latest
    volumes:
      - ./scripts:/scripts
      - certs:/certs
      - client_certs:/client_certs
      - /tmp:/temp


  credentials:
#    container_name: credentials
    command:
      - "/bin/sh"
      - "/scripts/make_sda_credentials.sh"
#    depends_on:
#      certfixer:
#        condition: service_completed_successfully
#      postgres:
#        condition: service_healthy
#      rabbitmq:
#        condition: service_healthy
    environment:
      - PGPASSWORD=rootpasswd
      - PGSSLROOTCERT=/certs/ca.crt
      - PGSSLCERT=/certs/client.crt
      - PGSSLKEY=/certs/client.key
    image: python:3.11-slim
    volumes:
      - ./scripts:/scripts
      - client_certs:/certs
      - shared:/shared

  db:
    #    image: ghcr.io/neicnordic/sensitive-data-archive:PR991-postgres
    image: postgres:test40
    ports:
      - 5432:5432
    environment:
      - LEGA_IN_PASSWORD=password
      - LEGA_OUT_PASSWORD=password
      #      - POSTGRES_SERVER_CERT=/etc/ega/pg.cert
      #      - POSTGRES_SERVER_KEY=/etc/ega/pg.key
      #      - POSTGRES_SERVER_CACERT=/etc/ega/CA.cert
      #      - PG_VERIFY_PEER=1
      - POSTGRES_PASSWORD=password


  mockauth:
    image: python:3.11-slim
    ports:
      - 8000:8000
    volumes:
      - ./test/mock_auth.py:/mock_auth.py
    command: >
      sh -c "pip install --upgrade pip && pip install aiohttp Authlib && python -u /mock_auth.py 0.0.0.0 8000"

  rabbitmq:
    image: ghcr.io/neicnordic/sensitive-data-archive:v0.3.23-rabbitmq
#    container_name: rabbitmq
#    depends_on:
#      certfixer:
#        condition: service_completed_successfully
    environment:
      - RABBITMQ_SERVER_CACERT=/etc/rabbitmq/ssl/ca.crt
      - RABBITMQ_SERVER_CERT=/etc/rabbitmq/ssl/mq.crt
      - RABBITMQ_SERVER_KEY=/etc/rabbitmq/ssl/mq.key
      - RABBITMQ_SERVER_VERIFY=verify_none
    healthcheck:
        test:
          [
          "CMD",
          "bash",
          "-c",
          "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms",
          ]
        interval: 5s
        timeout: 20s
        retries: 3
    restart: always
    volumes:
        - certs:/etc/rabbitmq/ssl/
        - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - 5671:5671
      - 25671:15671

volumes:
  db:
  certs:
  client_certs:
  postgres_data:
  rabbitmq_data:
  shared:
